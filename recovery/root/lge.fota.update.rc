import /init.recovery.${ro.hardware}.rc
import /init.recovery.${ro.hardware}_product.rc

on early-init
    start ueventd
    start healthd

on init
    export PATH /sbin:/system/bin
    export ANDROID_ROOT /system
    export ANDROID_DATA /data
    export EXTERNAL_STORAGE /sdcard

    symlink /system/etc /etc
    symlink /dev/block/platform/mtk-msdc.0/11230000.msdc0/by-name/misc2 /dev/misc2

    mkdir /sdcard
    mkdir /system
    mkdir /data
    mkdir /cache
    mkdir /OP
    mkdir /cust
    mkdir /persist
    insmod /sec.ko
    mknod /dev/sec c 182 0
    chmod 0660 /dev/sec
    mkdir /sideload
    mkdir /firmware 0771 system system
    mkdir /persist-lg 0755 system system
    mount tmpfs tmpfs /tmp

    chown root shell /tmp
    chmod 0775 /tmp
    symlink /system/vendor /vendor
    write /proc/sys/kernel/panic_on_oops 1
    write /proc/sys/vm/max_map_count 1000000

on fs
    write /proc/bootprof "start mobicore (on fs)"    
    chmod 0600 /dev/mobicore
    chown system system /dev/mobicore
    chmod 0666 /dev/mobicore-user
    chown system system /dev/mobicore-user
    # MobiCore Daemon Paths
    export MC_AUTH_TOKEN_PATH /efs
    start mobicore
    write /proc/bootprof "start mobicore end (on fs)"
    
    mkdir /dev/usb-ffs 0770 shell shell
    mkdir /dev/usb-ffs/adb 0770 shell shell
    mount functionfs adb /dev/usb-ffs/adb uid=2000,gid=2000

    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/idVendor 1004
    write /sys/class/android_usb/android0/idProduct 631F
    write /sys/class/android_usb/android0/bDeviceClass 0
    write /sys/class/android_usb/android0/bDeviceSubClass 0
    write /sys/class/android_usb/android0/bDeviceProtocol 0
    write /sys/class/android_usb/android0/f_ffs/aliases adb
    write /sys/class/android_usb/android0/functions adb
    write /sys/class/android_usb/android0/iSerial ${ro.serialno}

    mount ext4 /dev/block/platform/mtk-msdc.0/11230000.msdc0/by-name/system /system ro wait
    mount ext4 /dev/block/platform/mtk-msdc.0/11230000.msdc0/by-name/OP /OP rw wait
    restorecon_recursive /OP
    mount ext4 /dev/block/platform/mtk-msdc.0/11230000.msdc0/by-name/cust /cust rw wait

    on property:ro.hardware=mp1s3gds
		wait /emmc@android
		mount ext4 /emmc@android /system ro wait

on post-fs
    mkdir /persist-lg/property 0771 system radio

on post-fs-data
    mkdir /data/local 0751 root root
    mkdir /data/local/tmp 0771 shell shell
    mkdir /data/data 0771 system system
    mkdir /data/property 0700 root root

on boot
    ifup lo
    hostname localhost
    domainname localdomain

    class_start default

# Load properties from /system/ + /factory after fs mount.
on load_all_props_action
    load_all_props

on firmware_mounts_complete
   rm /dev/.booting

on single_binary_init_action
    mount ext4 /dev/block/platform/mtk-msdc.0/11230000.msdc0/by-name/userdata /data rw wait
	mount ext4 /dev/block/platform/mtk-msdc.0/11230000.msdc0/by-name/persist /persist noatime nosuid nodev wait commit=1,nodelalloc,noauto_da_alloc
    mount ext4 /dev/block/platform/mtk-msdc.0/11230000.msdc0/by-name/persist_lg /persist-lg noatime nosuid nodev wait commit=1,nodelalloc,noauto_da_alloc

    single_binary_init

# Mount filesystems and start core system services.
on late-init
    trigger early-fs
    trigger fs
    trigger post-fs
    trigger post-fs-data

# Trigger SBP
    trigger single_binary_init_action

    # Load properties from /system/ + /factory after fs mount. Place
    # this in another action so that the load will be scheduled after the prior
    # issued fs triggers have completed.
    trigger load_all_props_action

    # Remove a file to wake up anything waiting for firmware
    trigger firmware_mounts_complete

    trigger early-boot
    trigger boot

on property:sys.powerctl=*
   powerctl ${sys.powerctl}

service ueventd /sbin/ueventd
    critical
    seclabel u:r:ueventd:s0

service healthd /sbin/healthd -r
    critical
    seclabel u:r:healthd:s0

service recovery /sbin/recovery
    seclabel u:r:recovery:s0

service adbd /sbin/adbd --root_seclabel=u:r:su:s0 --device_banner=recovery
    disabled
    socket adbd stream 660 system system
    seclabel u:r:adbd:s0

# Always start adbd on userdebug and eng builds
on property:ro.debuggable=1
#    write /sys/class/android_usb/android0/enable 0
#    write /sys/class/android_usb/android0/idVendor 0E8D
#    write /sys/class/android_usb/android0/idProduct 201C
#    write /sys/class/android_usb/android0/f_ffs/aliases adb
#    write /sys/class/android_usb/android0/functions adb
    write /sys/class/android_usb/android0/enable 1
    start adbd

# Restart adbd so it can run as root
on property:service.adb.root=1
    write /sys/class/android_usb/android0/enable 0
    restart adbd
    write /sys/class/android_usb/android0/enable 1

# Start Daemon (Registry directories should already be present)
service mobicore /system/bin/mcDriverDaemon -r /system/app/mcRegistry/020f0000000000000000000000000000.drbin -r /system/app/mcRegistry/05120000000000000000000000000000.drbin -r /system/app/mcRegistry/070b0000000000000000000000000000.drbin
        user system
        group system
        class core
        oneshot
